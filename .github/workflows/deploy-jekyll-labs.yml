name: 🚀 Deploy Jekyll Lab Browser

on:
  # Only run when manually triggered by PDF generation workflow
  workflow_dispatch:
    inputs:
      deploy_preview:
        description: 'Deploy as preview (separate environment)'
        required: false
        default: false
        type: boolean
      
  # Also allow manual deployment for testing
  push:
    branches: [ jekyll-lab-browser ]  # Only deploy from this branch
    paths: [ '_layouts/**', 'assets/**', '_config.yml', 'scripts/**', 'lab-config.yml' ]  # Removed 'labs/**' and 'index.md' since they trigger PDF generation first

jobs:
  build-and-deploy:
    name: � Build and Deploy Jekyll
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: write  # Required to trigger other workflows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: Install PowerShell and dependencies
        run: |
          # Install PowerShell 7.x
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb || sudo apt-get install -f -y
          
      - name: Install PowerShell YAML module
        run: pwsh -Command "Install-Module -Name powershell-yaml -Force -Scope CurrentUser -Repository PSGallery"

      - name: Convert labs to Jekyll format using PowerShell
        run: pwsh -File scripts/Generate-Labs.ps1

      - name: 📄 Download Latest PDF Artifacts
        uses: dawidd6/action-download-artifact@v6
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          workflow: generate-documentation.yml
          name: lab-documentation
          path: ./pdfs/
        continue-on-error: true

      - name: Copy PDFs to Jekyll assets
        run: |
          # Create assets directory for PDFs if it doesn't exist
          mkdir -p assets/pdfs
          
          # Copy PDFs if they exist
          if [ -d "./pdfs" ]; then
            echo "📄 Found PDF artifacts, copying to Jekyll assets..."
            find ./pdfs -name "*.pdf" -type f | while read pdf_file; do
              lab_name=$(basename "$(dirname "$pdf_file")")
              cp "$pdf_file" "assets/pdfs/${lab_name}.pdf"
              echo "  ✅ Copied PDF for lab: $lab_name"
            done
            echo "📊 Total PDFs copied: $(find assets/pdfs -name "*.pdf" | wc -l)"
          else
            echo "⚠️  No PDF artifacts found - PDFs will be generated on next documentation workflow run"
          fi

      - name: Install Jekyll dependencies
        run: |
          gem install bundler jekyll
          bundle config set --local path 'vendor/bundle'
          bundle install --retry 3 --jobs 4

      - name: Build Jekyll site
        run: |
          bundle exec jekyll build --verbose
        env:
          JEKYLL_ENV: production

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: 🎉 Deployment Summary
        run: |
          echo "✅ Jekyll Lab Browser deployed successfully!"
          echo "🌐 Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "📚 Lab browser is now live with fresh PDFs!"
          echo "📊 Auto-generated lab cards from README files"
          echo ""
          echo "✅ CORRECT WORKFLOW ORDER IMPLEMENTED:"
          echo "  1. 📄 PDF Generation runs FIRST (triggered by lab content changes)"
          echo "  2. 🚀 Jekyll Deployment runs SECOND (triggered by PDF workflow completion)"
          echo "  3. 🌐 Site goes live with fresh PDFs already included"
          echo ""
          echo "🎯 Features deployed:"
          echo "  - Auto-generated lab pages with PDF download links"
          echo "  - Clean lab card display with PDF buttons"
          echo "  - Fresh PDFs generated BEFORE deployment"
          echo "  - Responsive design with journey navigation"
          echo "  - PowerShell-based content generation"