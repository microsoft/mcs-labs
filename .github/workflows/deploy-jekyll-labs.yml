name: üöÄ Deploy Jekyll Lab Browser

on:
  push:
    branches: [ jekyll-lab-browser ]  # Only deploy from this branch
    paths: [ 'labs/**', '_layouts/**', 'assets/**', '_config.yml', 'index.md', 'scripts/**', 'lab-config.yml' ]
  pull_request:
    branches: [ jekyll-lab-browser ]
  
  # Allow manual deployment for testing
  workflow_dispatch:
    inputs:
      deploy_preview:
        description: 'Deploy as preview (separate environment)'
        required: false
        default: true
        type: boolean
      
  # Trigger from documentation workflow completion
  workflow_run:
    workflows: ["üìö Generate Lab Documentation (HTML & PDF)"]
    types:
      - completed

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pages: write
      id-token: write
      actions: write  # Required to trigger other workflows

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.1'
          bundler-cache: false

      - name: Install PowerShell and dependencies
        run: |
          # Install PowerShell 7.x
          wget -q https://github.com/PowerShell/PowerShell/releases/download/v7.4.0/powershell_7.4.0-1.deb_amd64.deb
          sudo dpkg -i powershell_7.4.0-1.deb_amd64.deb || sudo apt-get install -f -y
          
      - name: Install PowerShell YAML module
        run: pwsh -Command "Install-Module -Name powershell-yaml -Force -Scope CurrentUser -Repository PSGallery"

      - name: Convert labs to Jekyll format using PowerShell
        run: pwsh -File scripts/Generate-Labs.ps1

      - name: Download PDF artifacts (if available)
        uses: actions/download-artifact@v4
        with:
          name: lab-documentation
          path: ./pdfs/
        continue-on-error: true  # Don't fail if PDFs aren't available

      - name: Copy PDFs to Jekyll assets
        run: |
          # Create assets directory for PDFs if it doesn't exist
          mkdir -p assets/pdfs
          
          # Copy PDFs if they exist
          if [ -d "./pdfs" ]; then
            echo "üìÑ Found PDF artifacts, copying to Jekyll assets..."
            find ./pdfs -name "*.pdf" -type f | while read pdf_file; do
              lab_name=$(basename "$(dirname "$pdf_file")")
              cp "$pdf_file" "assets/pdfs/${lab_name}.pdf"
              echo "  ‚úÖ Copied PDF for lab: $lab_name"
            done
            echo "üìä Total PDFs copied: $(find assets/pdfs -name "*.pdf" | wc -l)"
          else
            echo "‚ö†Ô∏è  No PDF artifacts found - PDFs will be generated on next documentation workflow run"
          fi

      - name: Install Jekyll dependencies
        run: |
          gem install bundler jekyll
          bundle config set --local path 'vendor/bundle'
          bundle install --retry 3 --jobs 4

      - name: Build Jekyll site
        run: |
          bundle exec jekyll build --verbose
        env:
          JEKYLL_ENV: production

      - name: Setup GitHub Pages
        uses: actions/configure-pages@v4

      - name: Upload to GitHub Pages
        uses: actions/upload-pages-artifact@v3
        with:
          path: ./_site

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: üéâ Deployment Summary
        run: |
          echo "‚úÖ Jekyll Lab Browser deployed successfully!"
          echo "üåê Site URL: ${{ steps.deployment.outputs.page_url }}"
          echo "üìö Lab browser is now live!"
          echo "üìä Auto-generated lab cards from README files"
          echo ""
          echo "üéØ Features deployed:"
          echo "  - Auto-generated lab pages with PDF download links"
          echo "  - Clean lab card display with PDF buttons"
          echo "  - Responsive design"
          echo "  - PowerShell-based content generation"
          echo "  - PDF generation workflow integration"

      - name: üìÑ Trigger PDF Generation
        uses: actions/github-script@v7
        with:
          script: |
            // Trigger the documentation workflow to generate PDFs
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'generate-documentation.yml',
              ref: 'jekyll-lab-browser'
            });
            console.log('üìÑ Triggered PDF generation workflow');
        continue-on-error: true  # Don't fail deployment if PDF trigger fails